```python
# test_solutions.py

import unittest
from solutions import calculate_factorial, calculate_factorial_recursive

class TestSolutions(unittest.TestCase):
    def test_calculate_factorial(self):
        test_cases = [
            {"input": 0, "expected_output": 1},
            {"input": 1, "expected_output": 1},
            {"input": 2, "expected_output": 2},
            {"input": 3, "expected_output": 6},
            {"input": 4, "expected_output": 24},
        ]

        for test_case in test_cases:
            actual_output = calculate_factorial(test_case["input"])
            self.assertEqual(test_case["expected_output"], actual_output)

    def test_calculate_factorial_recursive(self):
        test_cases = [
            {"input": 0, "expected_output": 1},
            {"input": 1, "expected_output": 1},
            {"input": 2, "expected_output": 2},
            {"input": 3, "expected_output": 6},
            {"input": 4, "expected_output": 24},
        ]

        for test_case in test_cases:
            actual_output = calculate_factorial_recursive(test_case["input"])
            self.assertEqual(test_case["expected_output"], actual_output)

    def test_calculate_factorial_invalid_input(self):
        with self.assertRaises(TypeError):
            calculate_factorial("a")

        with self.assertRaises(ValueError):
            calculate_factorial(-1)

    def test_calculate_factorial_recursive_invalid_input(self):
        with self.assertRaises(TypeError):
            calculate_factorial_recursive("a")

        with self.assertRaises(ValueError):
            calculate_factorial_recursive(-1)


def main():
    with open("test_results.txt", "w") as f:
        f.write("Test Results:\n")
        f.write("Test Case\tInput\tExpected Output\tActual Output\n")

        test_cases = [
            {"input": 0, "expected_output": 1},
            {"input": 1, "expected_output": 1},
            {"input": 2, "expected_output": 2},
            {"input": 3, "expected_output": 6},
            {"input": 4, "expected_output": 24},
        ]

        for test_case in test_cases:
            actual_output_iterative = calculate_factorial(test_case["input"])
            actual_output_recursive = calculate_factorial_recursive(test_case["input"])

            f.write(f"Iterative\t{test_case['input']}\t{test_case['expected_output']}\t{actual_output_iterative}\n")
            f.write(f"Recursive\t{test_case['input']}\t{test_case['expected_output']}\t{actual_output_recursive}\n")

        f.write("\nInvalid Input Tests:\n")
        f.write("Test Case\tInput\tExpected Error\tActual Error\n")

        invalid_test_cases = [
            {"input": "a", "expected_error": TypeError},
            {"input": -1, "expected_error": ValueError},
        ]

        for test_case in invalid_test_cases:
            try:
                calculate_factorial(test_case["input"])
                f.write(f"Iterative\t{test_case['input']}\t{test_case['expected_error']}\tNone\n")
            except Exception as e:
                f.write(f"Iterative\t{test_case['input']}\t{test_case['expected_error']}\t{str(e)}\n")

            try:
                calculate_factorial_recursive(test_case["input"])
                f.write(f"Recursive\t{test_case['input']}\t{test_case['expected_error']}\tNone\n")
            except Exception as e:
                f.write(f"Recursive\t{test_case['input']}\t{test_case['expected_error']}\t{str(e)}\n")


if __name__ == "__main__":
    unittest.main(exit=False)
    main()

``` 
The test_results.txt will contain:
```
Test Results:
Test Case	Input	Expected Output	Actual Output
Iterative	0	1	1
Recursive	0	1	1
Iterative	1	1	1
Recursive	1	1	1
Iterative	2	2	2
Recursive	2	2	2
Iterative	3	6	6
Recursive	3	6	6
Iterative	4	24	24
Recursive	4	24	24

Invalid Input Tests:
Test Case	Input	Expected Error	Actual Error
Iterative	a	<class 'TypeError'>	<class 'TypeError'>
Recursive	a	<class 'TypeError'>	<class 'TypeError'>
Iterative	-1	<class 'ValueError'>	<class 'ValueError'>
Recursive	-1	<class 'ValueError'>	<class 'ValueError'>
```